// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABSE_URL")
}

// refer :-> https://www.prisma.io/docs/concepts/components/prisma-schema
// Install VsCode Prisma Extension for a very clean and nice formatting
// User, Song, Artist, Playlist and Album are the basic once that we need
model User {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  email     String     @unique
  password  String
  // User and playlist will have one to many relationship
  playlists Playlist[]
}

model Song {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  // no need of having a song name unique
  name      String
  // Artist - song relationship is one to many
  artist    Artist     @relation(fields: [artistId], references: [id])
  artistId  Int
  // Song and Playlist will have many to many relationship
  playlists Playlist[]
}

model Artist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songs     Song[]
  name      String   @unique
}

model Playlist {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  songs     Song[]
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

// Migrations with Prisma:
// Prisma has 'database push' which is the same as migration but it doesn't create a history
// Its basically meant for prototyping the schema without fully committing to, kinda doing git commit without git push
// Run in terminal 'npx prisma db push', once you run this you will get a confirmation that prisma is in sync with your database that you have deployed somewhere, it'll generate a prisma client
// In layman terms, it means that Prisma confirms that it has notified the data base about schema changes
// The generated client will be used for us to query the database, we have literally an SDK created just for our schema that know about all of our fields and the types of those fields, in nextjs you can use it on the frontend as well as backend
// 'npx prisma migrate dev' is like git push, it will ask for migration name (just like message in git commit)
// now you can check your sql code in migrations folder
// as we go forward, we can make changes to the schema, and we can just keep running db.push and it'll tell us if we need to run a migration or not
